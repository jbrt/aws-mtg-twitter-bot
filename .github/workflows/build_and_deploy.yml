name: Test code quality and deploy it

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code_testing:
    name: Test code quality
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Installing dependencies
        run: pip install -r requirements-dev.txt

      - name: Code linting
        run: flake8 src/

      - name: Run unit tests and generate coverage report
        run: pytest -n 15 --cov=./ --cov-report=xml tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=jbrt
            -Dsonar.projectKey=jbrt_aws-mtg-twitter-bot
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=src/
            -Dsonar.tests=tests/
            -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  code_deploying:
    name: Deploying infrastructure
    needs: [code_testing]
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_consumer_key: ${{ secrets.CONSUMER_KEY }}
      TF_VAR_consumer_secret: ${{ secrets.CONSUMER_SECRET }}
      TF_VAR_access_token: ${{ secrets.ACCESS_TOKEN }}
      TF_VAR_access_token_secret: ${{ secrets.ACCESS_TOKEN_SECRET }}
      LAYER_PATH: "layer/python/lib/python3.8/site-packages/"

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install needed files for Lambda layer
        run: |
          mkdir -p $LAYER_PATH
          pip install -r requirements.txt -t $LAYER_PATH

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ secrets.S3_BUCKET }}" -backend-config="key=${{ secrets.S3_KEY }}"

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          cd terraform
          terraform plan -no-color
        continue-on-error: false

      - name: Terraform Plan Status
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
        run: exit 1

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          cd terraform
          terraform apply -auto-approve
